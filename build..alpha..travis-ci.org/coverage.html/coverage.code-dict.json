{"/home/travis/build/npmtest/node-npmtest-electron-json-storage/test.js":"/* istanbul instrument in package npmtest_electron_json_storage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-json-storage/lib.npmtest_electron_json_storage.js":"/* istanbul instrument in package npmtest_electron_json_storage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electron_json_storage = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electron_json_storage = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-json-storage/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electron-json-storage && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electron_json_storage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electron_json_storage\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electron_json_storage.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_electron_json_storage.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electron_json_storage.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_electron_json_storage.__dirname + '/lib.npmtest_electron_json_storage.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-json-storage/node_modules/electron-json-storage/lib/storage.js":"/*\n * The MIT License\n *\n * Copyright (c) 2016 Juan Cruz Viotti. https://github.com/jviotti\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @module storage\n */\n\nconst _ = require('lodash');\nconst async = require('async');\nconst fs = require('fs');\nconst rimraf = require('rimraf');\nconst mkdirp = require('mkdirp');\nconst path = require('path');\nconst utils = require('./utils');\n\n/**\n * @summary Read user data\n * @function\n * @public\n *\n * @description\n * If the key doesn't exist in the user data, an empty object is returned.\n * Also notice that the `.json` extension is added automatically, but it's\n * ignored if you pass it yourself.\n *\n * Passing an extension other than `.json` will result in a file created\n * with both extensions. For example, the key `foo.data` will result in a file\n * called `foo.data.json`.\n *\n * @param {String} key - key\n * @param {Function} callback - callback (error, data)\n *\n * @example\n * const storage = require('electron-json-storage');\n *\n * storage.get('foobar', function(error, data) {\n *   if (error) throw error;\n *\n *   console.log(data);\n * });\n */\nexports.get = function(key, callback) {\n  async.waterfall([\n    async.asyncify(_.partial(utils.getFileName, key)),\n    function(fileName, callback) {\n      fs.readFile(fileName, {\n        encoding: 'utf8'\n      }, function(error, object) {\n        if (!error) {\n          return callback(null, object);\n        }\n\n        if (error.code === 'ENOENT') {\n          return callback(null, JSON.stringify({}));\n        }\n\n        return callback(error);\n      });\n    },\n    function(object, callback) {\n      var objectJSON = {};\n      try {\n        objectJSON = JSON.parse(object);\n      } catch (error) {\n        return callback(new Error('Invalid data: ' + object));\n      }\n      return callback(null, objectJSON);\n    }\n  ], callback);\n};\n\n/**\n * @summary Read many user data keys\n * @function\n * @public\n *\n * @description\n * This function returns an object with the data of all the passed keys.\n * If one of the keys doesn't exist, an empty object is returned for it.\n *\n * @param {String[]} keys - keys\n * @param {Function} callback - callback (error, data)\n *\n * @example\n * const storage = require('electron-json-storage');\n *\n * storage.getMany([ 'foobar', 'barbaz' ], function(error, data) {\n *   if (error) throw error;\n *\n *   console.log(data.foobar);\n *   console.log(data.barbaz);\n * });\n */\nexports.getMany = function(keys, callback) {\n  async.reduce(keys, {}, function(reducer, key, callback) {\n    exports.get(key, function(error, data) {\n      if (error) {\n        return callback(error);\n      }\n\n      return callback(null, _.set(reducer, key, data));\n    });\n  }, callback);\n};\n\n/**\n * @summary Read all user data\n * @function\n * @public\n *\n * @description\n * This function returns an empty object if there is no data to be read.\n *\n * @param {Function} callback - callback (error, data)\n *\n * @example\n * const storage = require('electron-json-storage');\n *\n * storage.getAll(function(error, data) {\n *   if (error) throw error;\n *\n *   console.log(data);\n * });\n */\nexports.getAll = function(callback) {\n  async.waterfall([\n    exports.keys,\n    function(keys, callback) {\n      async.reduce(keys, {}, function(reducer, key, callback) {\n        async.waterfall([\n          _.partial(exports.get, key),\n          function(contents, callback) {\n            return callback(null, _.set(reducer, key, contents));\n          }\n        ], callback);\n      }, callback);\n    }\n  ], callback);\n};\n\n/**\n * @summary Write user data\n * @function\n * @public\n *\n * @param {String} key - key\n * @param {Object} json - json object\n * @param {Function} callback - callback (error)\n *\n * @example\n * const storage = require('electron-json-storage');\n *\n * storage.set('foobar', { foo: 'bar' }, function(error) {\n *   if (error) throw error;\n * });\n */\nexports.set = function(key, json, callback) {\n  async.waterfall([\n    async.asyncify(_.partial(utils.getFileName, key)),\n    function(fileName, callback) {\n      const data = JSON.stringify(json);\n\n      if (!data) {\n        return callback(new Error('Invalid JSON data'));\n      }\n\n      // Create the directory in case it doesn't exist yet\n      mkdirp(path.dirname(fileName), function(error) {\n        if (error) {\n          return callback(error);\n        }\n\n        fs.writeFile(fileName, data, callback);\n      });\n\n    }\n  ], callback);\n};\n\n/**\n * @summary Check if a key exists\n * @function\n * @public\n *\n * @param {String} key - key\n * @param {Function} callback - callback (error, hasKey)\n *\n * @example\n * const storage = require('electron-json-storage');\n *\n * storage.has('foobar', function(error, hasKey) {\n *   if (error) throw error;\n *\n *   if (hasKey) {\n *     console.log('There is data stored as `foobar`');\n *   }\n * });\n */\nexports.has = function(key, callback) {\n  async.waterfall([\n    async.asyncify(_.partial(utils.getFileName, key)),\n    function(filename, done) {\n      fs.stat(filename, (error) => {\n        if (error) {\n          if (error.code === 'ENOENT') {\n            return done(null, false);\n          }\n\n          return done(error);\n        }\n\n        return done(null, true);\n      });\n    }\n  ], callback);\n};\n\n/**\n * @summary Get the list of saved keys\n * @function\n * @public\n *\n * @param {Function} callback - callback (error, keys)\n *\n * @example\n * const storage = require('electron-json-storage');\n *\n * storage.keys(function(error, keys) {\n *   if (error) throw error;\n *\n *   for (var key of keys) {\n *     console.log('There is a key called: ' + key);\n *   }\n * });\n */\nexports.keys = function(callback) {\n  async.waterfall([\n    async.asyncify(utils.getUserDataPath),\n    function(userDataPath, callback) {\n      mkdirp(userDataPath, function(error) {\n        return callback(error, userDataPath);\n      });\n    },\n    fs.readdir,\n    function(keys, callback) {\n      callback(null, _.map(_.reject(keys, function(key) {\n        return _.includes([ '.DS_Store' ], key);\n      }), function(key) {\n        return path.basename(key, '.json');\n      }));\n    }\n  ], callback);\n};\n\n/**\n * @summary Remove a key\n * @function\n * @public\n *\n * @description\n * Notice this function does nothing, nor throws any error\n * if the key doesn't exist.\n *\n * @param {String} key - key\n * @param {Function} callback - callback (error)\n *\n * @example\n * const storage = require('electron-json-storage');\n *\n * storage.remove('foobar', function(error) {\n *   if (error) throw error;\n * });\n */\nexports.remove = function(key, callback) {\n  async.waterfall([\n    async.asyncify(_.partial(utils.getFileName, key)),\n    rimraf\n  ], callback);\n};\n\n/**\n * @summary Clear all stored data\n * @function\n * @public\n *\n * @param {Function} callback - callback (error)\n *\n * @example\n * const storage = require('electron-json-storage');\n *\n * storage.clear(function(error) {\n *   if (error) throw error;\n * });\n */\nexports.clear = function(callback) {\n  const userData = utils.getUserDataPath();\n  const jsonFiles = path.join(userData, '*.json');\n  rimraf(jsonFiles, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-electron-json-storage/node_modules/electron-json-storage/lib/utils.js":"/*\n * The MIT License\n *\n * Copyright (c) 2016 Juan Cruz Viotti. https://github.com/jviotti\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n'use strict';\n\nconst _ = require('lodash');\nconst path = require('path');\nconst electron = require('electron');\n\n/**\n * @summary Get user data directory path\n * @function\n * @public\n *\n * @returns {Strings} user data path\n *\n * let userDataPath = utils.getUserDataPath();\n * console.log(userDataPath);\n */\n exports.getUserDataPath = function() {\n   const app = electron.app || (electron.remote && electron.remote.app);\n\n   if (app) {\n     return path.join(app.getPath('userData'), 'storage');\n   } else {\n     return '/tmp/storage';\n   }\n };\n\n/**\n * @summary Get storage file name for a key\n * @function\n * @public\n *\n * @param {String} key - key\n * @returns {String} file name\n *\n * @example\n * let fileName = utils.getFileName('foo');\n * console.log(fileName);\n */\nexports.getFileName = function(key) {\n  if (!key) {\n    throw new Error('Missing key');\n  }\n\n  if (!_.isString(key) || key.trim().length === 0) {\n    throw new Error('Invalid key');\n  }\n\n  // Trick to prevent adding the `.json` twice\n  // if the key already contains it.\n  const keyFileName = path.basename(key, '.json') + '.json';\n\n  // Prevent ENOENT and other similar errors when using\n  // reserved characters in Windows filenames.\n  // See: https://en.wikipedia.org/wiki/Filename#Reserved%5Fcharacters%5Fand%5Fwords\n  const escapedFileName = encodeURIComponent(keyFileName);\n\n  return path.join(exports.getUserDataPath(), escapedFileName);\n};\n"}